name: 发布软件

on:
  push: # 代码推送到main分支自动触发工作流
    branches:
      - master
  workflow_dispatch: # 手动触发

permissions: write-all # 给所有工作写权限

jobs:
  jobs_v:
    name: 构建版本号和变更信息
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.create_version.outputs.tag_name }} # 版本号
      body: ${{ steps.create_version.outputs.body }} # 版本变更内容
    steps:
      - uses: release-drafter/release-drafter@v5
        id: create_version
        with:
          config-name: release-drafter.yml # 配置文件在 .github/release-drafter.yml
          disable-autolabeler: true # 禁止自动标签
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
      - name: 查看变量
        run: |
          echo ${{ format('version={0}', steps.create_version.outputs.tag_name ) }}

  job_test:
    needs: jobs_v
    name: 构建ubuntu
    runs-on: ubuntu-latest
    env:
      version: ${{ needs.jobs_v.outputs.version }}
      body: ${{ needs.jobs_v.outputs.body }}
    steps:
      - uses: actions/checkout@v4
      - name: Flutter 环境
        uses: subosito/flutter-action@v2
        with:
          cache: true
          flutter-version: '3.13.9'

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - name: Install Dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y tar clang cmake ninja-build pkg-config libgtk-3-dev make python3-pip python3-setuptools desktop-file-utils libgdk-pixbuf2.0-dev fakeroot strace fuse libunwind-dev locate patchelf gir1.2-appindicator3-0.1 libappindicator3-1 libappindicator3-dev libsecret-1-0 libjsoncpp25 libsecret-1-dev libjsoncpp-dev libnotify-bin libnotify-dev mpv libmpv-dev

      - name: Install AppImage Tool
        run: |
          wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod +x appimagetool
          mv appimagetool /usr/local/bin/

      - name: BUILD_VERSION Env (stable)
        run: |
          echo "BUILD_VERSION=${{ env.version }}" >> $GITHUB_ENV

      - name: Create Stable .env
        run: echo '${{ secrets.TOKEN_GITHUB }}' > .env

      - name: Generate Secrets
        run: |
          flutter config --enable-linux-desktop
          flutter pub get
          dart run build_runner build --delete-conflicting-outputs --enable-experiment=records,patterns

      - name: Build Linux Packages
        run: |
          dart pub global activate flutter_distributor
          alias dpkg-deb="dpkg-deb --Zxz"
          flutter_distributor package --platform=linux --targets=deb
          flutter_distributor package --platform=linux --targets=rpm

      - name: Create tar.xz (stable)
        run: make tar VERSION=${{ env.version }} ARCH=x64 PKG_ARCH=x86_64

      - name: Move Files to dist
        run: |
          mv build/schedule-linux-*-x86_64.tar.xz dist/
          mv dist/**/schedule-*-linux.deb dist/schedule-linux-x86_64.deb
          mv dist/**/schedule-*-linux.rpm dist/schedule-linux-x86_64.rpm


      - uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: linux
          path: |
            dist/schedule-linux-${{ env.version }}-x86_64.deb
            dist/schedule-linux-${{ env.version }}-x86_64.rpm
            dist/schedule-linux-${{ env.version }}-x86_64.tar.xz

  #  jobs_apk:
  #    needs: jobs_v # 等待 jobs_v 任务完成才执行
  #    name: 构建android软件
  #    runs-on: ubuntu-latest
  #    env:
  #      version: ${{ needs.jobs_v.outputs.version }}
  #      body: ${{ needs.jobs_v.outputs.body }}
  #    steps:
  #      - uses: actions/checkout@v3
  #        with:
  #          submodules: recursive
  #      - name: 读入环境信息
  #        run: |
  #          echo ${{ format('version {0}', env.version ) }} # 版本号
  #      - name: 编译环境设置 Java 17
  #        uses: actions/setup-java@v2
  #        with:
  #          distribution: 'zulu'
  #          java-version: '17'
  #      - name: 编译apk
  #        uses: subosito/flutter-action@v2
  #        with:
  #          flutter-version: '3.13.9'
  #      - run: flutter pub get
  #      - run: flutter build apk --release
  #      - name: 上传产物
  #        uses: actions/upload-artifact@v3
  #        with:
  #          name: apk
  #          path: build/app/outputs/apk/release/app-release.apk
  #
  #  jobs_ipa:
  #    needs: jobs_v
  #    name: 构建ios软件
  #    runs-on: macos-latest
  #    env:
  #      version: ${{ needs.jobs_v.outputs.version }}
  #      body: ${{ needs.jobs_v.outputs.body }}
  #    steps:
  #      - uses: actions/checkout@v3
  #        with:
  #          submodules: recursive
  #      - name: 读入环境信息
  #        run: |
  #          echo ${{ format('version {0}', env.version ) }}
  #      - name: 编译环境设置
  #        uses: subosito/flutter-action@v2
  #        with:
  #          channel: 'stable'
  #          architecture: x64
  #      - name: Build (ios)
  #        run: |
  #          sh scripts/build-ipa.sh
  ##      - run: flutter pub get
  ##      - run: flutter build ios --release --no-codesign
  ##      - run: mkdir build/ios/iphoneos/Payload
  ##      - run: cp -r build/ios/iphoneos/Runner.app build/ios/iphoneos/Payload/Runner.app
  ##      - run: cd build/ios/iphoneos && zip -r release-ios.ipa Payload
  #      - name: 上传产物
  #        uses: actions/upload-artifact@v3
  #        with:
  #          name: ipa
  #          path: build/ios/iphoneos/release-ios.ipa

#  jobs_windows:
#    needs: jobs_v # 等待 jobs_v 任务完成才执行
#    name: 构建windows软件
#    runs-on: windows-latest
#    env:
#      version: ${{ needs.jobs_v.outputs.version }}
#      body: ${{ needs.jobs_v.outputs.body }}
#    steps:
#      - uses: actions/checkout@v3
#        with:
#          submodules: recursive
#      - name: 读入环境信息
#        run: |
#          echo ${{ format('version {0}', env.version ) }} # 版本号
#      - name: Flutter 环境
#        uses: subosito/flutter-action@v2
#        with:
#          flutter-version: '3.13.9'
#      - run: flutter pub get
#      - run: flutter build windows --release
#      - name: 压缩文件
#        # 删除android,ios,windows,linux,build,test文件夹
#        run: |
#          del build/windows/runner/Release/data/flutter_assets/android*
#          del build/windows/runner/Release/data/flutter_assets/ios*
#          del build/windows/runner/Release/data/flutter_assets/windows*
#          del build/windows/runner/Release/data/flutter_assets/linux*
#          del build/windows/runner/Release/data/flutter_assets/build*
#          del build/windows/runner/Release/data/flutter_assets/test*
#          del build/windows/runner/Release/data/flutter_assets/assets*
#          del build/windows/runner/Release/data/flutter_assets/.*
#          cd build/windows/runner
#          ren Release windows
#          curl -o zip.exe http://stahlworks.com/dev/zip.exe
#          .\zip -9 -r windows-${{ env.version }}.zip windows
#      - name: 上传产物
#        uses: actions/upload-artifact@v3
#        with:
#          name: exe
#          path: build/windows/runner/windows-${{ env.version }}.zip
#
  jobs4:
    # needs: [ jobs_v,jobs_apk,jobs_ipa,jobs_web ]
    needs: [ jobs_v, job_test ]
    name: 发布版本
    runs-on: ubuntu-latest
    env:
      version: ${{ needs.jobs_v.outputs.version }}
      body: ${{ needs.jobs_v.outputs.body }}
    steps:
      - name: 下载产物
        id: download
        uses: actions/download-artifact@v3
        with:
          path: ./
      - name: 读入环境信息
        run: |
          echo ${{ format('version {0}', env.version ) }}
          echo ${{steps.download.outputs.download-path}}
          ls -R

      - name: 发布文件
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.TOKEN_GITHUB }}
          allowUpdates: true # 覆盖文件
          #draft: true # 草稿 自己可见 版本号会保持一样 默认是自动发布 latest
          #prerelease: true # 预发布 别人可以看到 版本号会继续加
          tag: ${{ env.version }} # 版本号 v0.1.0
          body: ${{ env.body }} # 输出的内容
          artifacts: "apk/*.apk,ipa/*.ipa,exe/*.zip,macos/*.dmg,linux/*.deb,linux/*.rpm,linux/*.tar.xz"
